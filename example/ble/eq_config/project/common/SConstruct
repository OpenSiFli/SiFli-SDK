import os
import rtconfig

# Check SDK 
SIFLI_SDK = os.getenv('SIFLI_SDK')
if not SIFLI_SDK:
    print("Please run set_env.bat in root folder of SIFLI SDK to set environment.")
    exit()
from building import *

PrepareEnv()

################################## change rtconfig.xxx to customize build ########################################
# print (rtconfig.OUTPUT_DIR)

# Add bootloader project
proj_path = None
if "SF32LB56X" == rtconfig.CHIP:
    proj_path = os.path.join(SIFLI_SDK, 'example/boot_loader/project/sf32lb56x_v2')
elif "SF32LB52X" == rtconfig.CHIP:
    proj_path = os.path.join(SIFLI_SDK, 'example/boot_loader/project/butterflmicro/ram_v2')

proj_name = 'bootloader'
AddChildProj(proj_name, proj_path, False)


# Add LCPU project
proj_path = os.path.join(SIFLI_SDK, 'example/ble/lcpu_general/project/common')
lcpu_proj_name = 'lcpu'
AddChildProj(lcpu_proj_name, proj_path, True, core="LCPU")

# Set default compile options
SifliEnv()

TARGET = rtconfig.OUTPUT_DIR + rtconfig.TARGET_NAME + '.' + rtconfig.TARGET_EXT

env = Environment(tools = ['mingw'],
    AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
    CC = rtconfig.CC, CCFLAGS = rtconfig.CFLAGS,
    AR = rtconfig.AR, ARFLAGS = '-rc',
    LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)
   
# prepare building environment
objs = PrepareBuilding(env)

# make a building
DoBuilding(TARGET, objs)

# Add flash table
proj_path = None
if "SF32LB56X" == rtconfig.CHIP:
    proj_path = os.path.join(SIFLI_SDK, 'example/flash_table/sf32lb56x_common_v2')
elif "SF32LB52X" == rtconfig.CHIP:
    proj_path = os.path.join(SIFLI_SDK, 'example/flash_table/sf32lb52x_common_v2')

proj_name = 'ftab'
AddChildProj(proj_name, proj_path, False)

GenDownloaScript(env)
