import os
import rtconfig
import resource

# Check SDK 
SIFLI_SDK = os.getenv('SIFLI_SDK')
if not SIFLI_SDK:
    print("Please run set_env.bat in root folder of SIFLI SDK to set environment.")
    exit()
from building import *

variables = {}
variables['FLASH3_REGION0_OFFSET'] = 0
variables['FLASH3_REGION0_SIZE'] = 8*1024*1024 
variables['FLASH3_REGION2_OFFSET'] = variables['FLASH3_REGION0_OFFSET'] + variables['FLASH3_REGION0_SIZE']
variables['FLASH3_REGION2_SIZE'] = 23*1024*1024         #FS ROOT
variables['FLASH3_REGION3_OFFSET'] = variables['FLASH3_REGION2_OFFSET'] + variables['FLASH3_REGION2_SIZE']
variables['FLASH3_REGION3_SIZE'] = 16*1024              #FS EX

variables['PSRAM_DATA_REGION_OFFSET'] = 0               #PSRAM data offset
variables['PSRAM_DATA_REGION_SIZE'] = 32*1024*1024     #PSRAM data size


src_file = os.path.abspath('./linker_scripts/ptab.template')
resource.GenPartitionJsonFile(src_file, 
                              os.path.abspath('./linker_scripts'), 
                              'ptab', 
                              variables)

# Add bootloader project
proj_path = os.path.join(SIFLI_SDK, 'example/boot_loader/project/sf32lb56x')
proj_name = 'bootloader'
AddChildProj(proj_name, proj_path, False, {"PARTITION_TABLE": './linker_scripts/ptab.json'})

# Add LCPU project
proj_path = os.path.join(SIFLI_SDK, 'example/ble/lcpu_general/project/ec-lb567')
lcpu_proj_name = 'lcpu'
AddChildProj(lcpu_proj_name, proj_path, True, {"PARTITION_TABLE": './linker_scripts/ptab.json'})

# Set default compile options
SifliEnv()

# Main project 
AddOption("", "--resource",
          action="store_true", dest="resource", default=False,
          help="Compile resource")

CPPDEFINES = ['EPIC_DEBUG', 'EZIP_DEBUG']

if (GetOption('resource')==True):
    resource.BuildStringPackage('../../resource/strings', './resource/lang', GetConfigValue('LV_EXT_RES_NON_STANDALONE'), GetConfigValue('LV_EXT_RES_DEFAULT_LANGUAGE'))
else:
    OUTPUT_DIR=rtconfig.OUTPUT_DIR
    TARGET = OUTPUT_DIR + rtconfig.TARGET_NAME + '.' + rtconfig.TARGET_EXT
    env = Environment(tools = ['mingw'],
        AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
        CC = rtconfig.CC, CFLAGS = rtconfig.CFLAGS,
        CXX = rtconfig.CXX, CXXFLAGS = rtconfig.CXXFLAGS,
        AR = rtconfig.AR, ARFLAGS = '-rc',
        LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS, CPPDEFINES = CPPDEFINES)
    env.PrependENVPath('PATH', rtconfig.EXEC_PATH)

    # prepare building environment
    objs = PrepareBuilding(env)

    # make a building
    DoBuilding(TARGET, objs)

    # Add flash table project
    proj_path = os.path.join(SIFLI_SDK, 'example/flash_table/sf32lb56x_common')
    proj_name = 'ftab'
    AddChildProj(proj_name, proj_path, False, {"PARTITION_TABLE": './linker_scripts/ptab.json'})

GenDownloaScript(env)

